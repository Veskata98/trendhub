// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id            String  @unique
  email_address String  @unique
  first_name    String?
  last_name     String?
  username      String  @id @unique
  image_url     String

  created_trends Trend[]
  trends         TrendOnProfile[]

  posts        Post[]
  likes        Like[]
  comments     Comment[]
  commentLikes CommentLike[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trend {
  id          String  @default(uuid())
  name        String  @id @unique
  description String?
  image_url   String

  creator_name String
  creator      Profile @relation(fields: [creator_name], references: [username], onDelete: Cascade)

  members TrendOnProfile[]

  posts Post[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model TrendOnProfile {
  profile_username String
  trend_name       String

  profile Profile @relation(fields: [profile_username], references: [username], onDelete: Cascade)
  trend   Trend   @relation(fields: [trend_name], references: [name], onDelete: Cascade)

  @@id([profile_username, trend_name])
}

model Post {
  id          String  @id @default(uuid())
  title       String
  description String?
  image_url   String?

  trend_name String
  trend      Trend  @relation(fields: [trend_name], references: [name], onDelete: Cascade)

  creator_name String
  creator      Profile @relation(fields: [creator_name], references: [username], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum LikeType {
  LIKE
  DISLIKE
}

model Like {
  id   Int      @id @default(autoincrement())
  type LikeType

  username String
  profile  Profile @relation(fields: [username], references: [username], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([username, postId, type])
}

model Comment {
  id           String  @id @default(uuid())
  content      String
  creator_name String
  creator      Profile @relation(fields: [creator_name], references: [username], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String? // This will be null for top-level comments
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])

  replies Comment[] @relation("CommentReplies")

  likes CommentLike[] // Track likes/dislikes for this comment

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CommentLike {
  id   Int      @id @default(autoincrement())
  type LikeType // Enum for UPVOTE or DOWNVOTE

  username String
  profile  Profile @relation(fields: [username], references: [username], onDelete: Cascade)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([username, commentId, type]) // Ensure a user can upvote or downvote a comment only once
}
